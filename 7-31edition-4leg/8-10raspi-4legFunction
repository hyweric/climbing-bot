import math
import numpy as np
from matplotlib.widgets import Slider, Button
import time
import matplotlib.pyplot as plt

# Raspi file system sus - putting all classes in one file

# from PlotClass import Plot
class Plot:
    def __init__(self):
        self.fig, self.ax = plt.subplots()
        self.points = {}
        self.lines = []

    def add_or_update_point(self, identifier, x, y):
        if identifier in self.points:
            self.points[identifier].set_data((x,), (y,))
        else:
            self.points[identifier], = self.ax.plot(x, y, 'o', label=identifier)

    def add_or_update_line(self, point1_id, point2_id):
        for line in self.lines:
            if line.get_label() == f"{point1_id}-{point2_id}":
                point1 = self.points[point1_id].get_data()
                point2 = self.points[point2_id].get_data()
                line.set_data([point1[0][0], point2[0][0]], [point1[1][0], point2[1][0]])
                return

        if point1_id in self.points and point2_id in self.points:
            point1 = self.points[point1_id].get_data()
            point2 = self.points[point2_id].get_data()
            line, = self.ax.plot([point1[0][0], point2[0][0]], [point1[1][0], point2[1][0]], 'r-', label=f"{point1_id}-{point2_id}")
            self.lines.append(line)

    def show(self):
        self.ax.legend()
        plt.show()

    def plotLines(self, OJKClass, x, y):
        self.add_or_update_point('p1', OJKClass.p1[0], OJKClass.p1[1])
        self.add_or_update_point('p2', OJKClass.p2[0], OJKClass.p2[1])
        self.add_or_update_point('p3', OJKClass.p3[0], OJKClass.p3[1])
        self.add_or_update_point('p4', OJKClass.p4[0], OJKClass.p4[1])
        self.add_or_update_point('p5', OJKClass.p5[0], OJKClass.p5[1])
        self.add_or_update_point('p6', OJKClass.p6[0], OJKClass.p6[1])
        self.add_or_update_point('endpoint', x, y)

        self.add_or_update_line('p1', 'p2')
        self.add_or_update_line('p2', 'p3')
        self.add_or_update_line('p1', 'p4')
        self.add_or_update_line('p4', 'p5')
        self.add_or_update_line('p3', 'p5')
        self.add_or_update_line('p2', 'endpoint')
        self.add_or_update_line('p2', 'p6')
        
        self.ax.set_xlim(-300, 300)
        self.ax.set_ylim(-300, 300)

        plt.draw()

# from OJK import offsetJointKinematics, inverseKinematics

def inverseKinematics(x, y, len1, len2):
    y = -y # temp fix since leg is facing down
    temp = (x ** 2 + y ** 2 - len1 ** 2 - len2 ** 2) / (2 * len1 * len2)
    if -1 <= temp <= 1:
        a = math.acos(temp)
        angle2 = math.pi - a
        b = math.acos((len1 ** 2 + x ** 2 + y ** 2 - len2 ** 2) / (2 * len1 * math.sqrt(x ** 2 + y ** 2)))
        angle1 = -(math.atan2(y, x) - b)
        return angle1, angle2
    else:
        return "No solution"

class offsetJointKinematics:
    def __init__(self, l1, l2, l4, l5, l8, x4, y4, t1, t2): 
        self.t1 = t1
        self.t2 = t2
        self.l1 = l1
        self.l2 = l2
        self.l3 = None 
        self.l4 = l4
        self.l5 = l5
        self.l6 = math.dist((0, 0), (x4, y4))
        self.l8 = l8  
        
        self.p1 = (0, 0)
        self.p2 = self.getP2()
        self.p3 = self.getP3()
        self.p4 = (x4, y4)
        self.p5 = (self.p4[0] - l4 * math.sin(self.getThetaFive()), self.p4[1] + l4 * math.cos(self.getThetaFive()))
        self.p6 = self.getP6()
    
    def getL7(self):
        return math.dist(self.getP2(), self.p4)
    
    def lawOfCosines(self, a, b, c):
        return math.acos((a**2 + b**2 - c**2) / (2 * a * b))
    
    def getP2(self):
        x2 = self.l1 * math.cos(math.radians(self.t1))
        y2 = self.l1 * math.sin(math.radians(self.t1))
        return x2, y2

    def getP3(self):
        x2, y2 = self.getP2()
        x3 = x2 + self.l2 * math.cos(math.radians(self.t2 + self.t1))
        y3 = y2 + self.l2 * math.sin(math.radians(self.t2 + self.t1))
        return (x3, y3)

    def getP6(self):
        x2, y2 = self.getP2()
        x6 = x2 - self.l8 * math.cos(math.radians(self.t2 + self.t1))
        y6 = y2 - self.l8 * math.sin(math.radians(self.t2 + self.t1))
        return (x6, y6)
    
    def getthetaFour(self):
        p3 = self.getP3()
        l3 = math.dist(p3, self.p4)
        l7 = self.getL7()
        Q4partComplementBottom = self.lawOfCosines(self.l6, l7, self.l1)
        Q4partComplementTop = self.lawOfCosines(l3, l7, self.l2)
        q4 = math.pi - (Q4partComplementBottom + Q4partComplementTop)
        return q4

    def getThetaThree(self):
        p3 = self.getP3()
        l3 = math.dist(p3, self.p4)
        t3 = math.acos((self.l4**2 + l3**2 - self.l5**2) / (2 * self.l4 * l3))  
        return t3

    def getThetaFive(self):
        q3 = self.getThetaThree()
        q4 = self.getthetaFour()
        q5 = q3 - q4
        return q5
        
    def update(self, t1, t2):
        self.t1 = t1
        self.t2 = t2
        self.p2 = self.getP2()
        self.p3 = self.getP3()

# from legEquations import legEquations
class legEquations:
    def sin_step(self, x):
        return (70/2) * math.sin(2 * math.pi / 140 * x + math.pi/2) - 135

    def semi_circle(self, x):
        return math.sqrt(70**2 - x**2) - 170

    def flat_line(self, x):
        return -170

from adafruit_servokit import ServoKit

kit = ServoKit(channels=8)

init_angles = [46.45, 36.37, 137.55, 148.629, 52.45, 46.37, 117.55, 158.629]
    
for i in range(8):
    kit.servo[i].set_pulse_width_range(500, 2500)
    kit.servo[i].angle = init_angles[i]

def call_angle(servo_id, angle):
    print("CALL ANGLE - Servo ID: ", servo_id, " Angle: ", angle)
    if 0 <= angle <=180:
        kit.servo[servo_id].angle = angle

    else:
        print("INVALID ANGLE: ", angle, " for servo: ", servo_id)
    # Set servo actuation range
    # kit.servo[channel].actuation_range = 180

""" 
# Not sure if needed - needed to map when using arduino at least. Servo problem?
def adjust_target(angle):
    if angle < 0:
        angle = 0
    elif angle > 180:
        angle = 180
    angle = np.interp(angle, [0, 180], [0, 130])
    return angle
"""

legServoList = {
    1: [[1, 0], [70, 74]], # leg 1, servo ids: [1, 0], offsets: [70, 74]
    2: [[3, 2], [115, 110]], # leg 2, servo ids: [3, 2], offsets: [115, 110]
    3: [[5, 4], [80, 80]], # leg 3, servo ids: [5, 4], offsets: [70, 70]
    4: [[7, 6], [125, 90]] # leg 4, servo ids: [7, 6], offsets: [135, 100]
}

def offset_angle(angle, leg, servo_id):
    if leg % 2 == 0:
        return - angle + legServoList[leg][1][servo_id]
    return angle + legServoList[leg][1][servo_id]

# Initial positional values
x, y = 10, -70
upperLeg = 80
lowerLeg = 128

plot = Plot()

t1Stack = []
t2Stack = []

def moving_avg(theta, stack):
    stack.append(theta)
    if len(stack) == 0:
        return theta
    if len(stack) > 6:
        stack.pop(0)
    return sum(stack) / len(stack)


def update_plot(x, y, leg):
    # print("UPDATE PLOT: x =", x, "y =", y, "leg =", leg)
    result = inverseKinematics(x, y, upperLeg, lowerLeg)
    if result == "No solution":
        return
    else:
        t1, t2 = result

    angles = [math.degrees(t1), math.degrees(t2)]
    print(angles)
    
    OJK1 = offsetJointKinematics(upperLeg, 68, 80, 125, lowerLeg, 0, 70, math.degrees(t1), math.degrees(t2))

    # offsetjoint kinematics parameters: l1, l2, l4, l5, l8, x4, y4, t1, t2
    call_angle(legServoList[leg][0][0], offset_angle((OJK1.t1), leg, 0))
    call_angle(legServoList[leg][0][1], offset_angle(math.degrees(OJK1.getThetaFive()), leg, 1))
    
    plot.add_or_update_point('p1', OJK1.p1[0], OJK1.p1[1])
    plot.add_or_update_point('p2', OJK1.p2[0], OJK1.p2[1])
    plot.add_or_update_point('p3', OJK1.p3[0], OJK1.p3[1])
    plot.add_or_update_point('p4', OJK1.p4[0], OJK1.p4[1])
    plot.add_or_update_point('p5', OJK1.p5[0], OJK1.p5[1])
    plot.add_or_update_point('p6', OJK1.p6[0], OJK1.p6[1])
    plot.add_or_update_point('endpoint', x, y)

    plot.add_or_update_line('p1', 'p2')
    plot.add_or_update_line('p2', 'p3')
    plot.add_or_update_line('p1', 'p4')
    plot.add_or_update_line('p4', 'p5')
    plot.add_or_update_line('p3', 'p5')
    plot.add_or_update_line('p2', 'endpoint')
    plot.add_or_update_line('p2', 'p6')
    
    plot.ax.set_xlim(-300, 300)
    plot.ax.set_ylim(-300, 300)

    plt.draw()

def trace_path(equation, x_range, x_direction, leg):
    if (x_direction > 0):
        current_x = x_range[0]
        while(current_x <= x_range[1]):
            y = equation(current_x)
            print("X: ", current_x, "Y: ", y)
            update_plot(current_x, y, leg)
            plt.pause(0.0005)
            current_x += x_direction
            # time.sleep(0.01)
    elif (x_direction < 0):
        current_x = x_range[1]
        while(current_x >= x_range[0]):
            y = equation(current_x)
            print("X: ", current_x, "Y: ", y)
            update_plot(current_x, y, leg)
            plt.pause(0.0005)
            current_x += x_direction
            # time.sleep(0.01)

legEq = legEquations()

# Initial plot (servo init pos determined by arduino program)
def take_step(leg):
    trace_path(legEq.sin_step, (-70, 70), -6, leg)
    trace_path(legEq.flat_line, (-70, 70), 8, leg)

take_step(2)